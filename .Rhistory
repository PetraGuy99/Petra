install.packages("leaflet")
# Load library
library(leaflet)
polygon_coords <- list(
list(c(51.5074, -0.1278)),  # London
list(c(51.5155, -0.1025)),  # Islington
list(c(51.4954, -0.1446))   # Westminster
)
leaflet() %>%
addTiles() %>%
setView(lng = -0.1278, lat = 51.5074, zoom = 10) %>%
addPolygons(
lng = c(-0.1278, -0.1025, -0.1446),
lat = c(51.5074, 51.5155, 51.4954),
color = "blue"
)
polygon_coords <- matrix(c(
-2.3202680, 51.0936780, # SE
-2.321158,51.09239,  # SW
-2.320709,51.093854, # SW
-2.319996 , 51.094244 # Close the polygon
), ncol = 2, byrow = TRUE)
# Create leaflet map centered in the UK and add polygon
leaflet() %>%
addTiles() %>%
setView(lng = -0.1278, lat = 51.5074, zoom = 10) %>%
addPolygons(
lng = c(-0.1278, -0.1025, -0.1446),
lat = c(51.5074, 51.5155, 51.4954),
color = "blue"
)
polygon_coords <- matrix(c(
-2.3202680, 51.0936780, # SE
-2.321158,51.09239,  # SW
-2.320709,51.093854, # SW
-2.319996 , 51.094244 # Close the polygon
), ncol = 2, byrow = TRUE)
polygon <- st_polygon(list(polygon_coords))
install.packages("ggplot2")
install.packages("sf")
install.packages("rnaturalearth")
install.packages("rnaturalearthdata")
# Load libraries
library(ggplot2)
library(sf)
library(rnaturalearth)
library(rnaturalearthdata)
# Get world map data, including the UK
world <- ne_countries(scale = "medium", returnclass = "sf")
polygon <- st_polygon(list(polygon_coords))
polygon_coords <- matrix(c(
-2.3202680, 51.0936780, # SE
-2.321158,51.09239,  # SW
-2.320709,51.093854, # SW
-2.319996 , 51.094244,
-2.3202680, 51.0936780
# Close the polygon
), ncol = 2, byrow = TRUE)
polygon <- st_polygon(list(polygon_coords))
sf_polygon <- st_sfc(polygon, crs = 4326)
# Plot using ggplot2
ggplot(data = world) +
geom_sf() +
geom_sf(data = sf_polygon, fill = "lightblue", color = "blue") +
coord_sf(xlim = c(-6, 2), ylim = c(50, 60)) + # UK bounding box
theme_minimal() +
labs(title = "Polygon around London")
# Polygon coordinates (longitude, latitude) around London
polygon_coords <- matrix(c(
-2.3202680, 51.0936780, # SE
-2.321158,51.09239,  # SW
-2.320709,51.093854, # SW
-2.319996 , 51.094244,
-2.3202680, 51.0936780
# Close the polygon
), ncol = 2, byrow = TRUE)
# Convert to sf polygon object
polygon <- st_polygon(list(polygon_coords))
sf_polygon <- st_sfc(polygon, crs = 4326)
ggplot(data = world) +
geom_sf() +
geom_sf(data = sf_polygon, fill = "lightblue", color = "blue") +
coord_sf(xlim = c(-6, 2), ylim = c(50, 60)) + # UK bounding box
theme_minimal() +
labs(title = "Polygon around London")
polygon_coords <- list(
list(c(-2.3202680, 51.0936780)),  # London
list(c(-2.321158,51.09239)),  # Islington
list(c( -2.320709,51.093854)),
list(c(-2.319996 , 51.094244)),
list(c( -2.3202680, 51.0936780))
)
# Create leaflet map centered in the UK and add polygon
leaflet() %>%
addTiles() %>%
setView(lng = -0.1278, lat = 51.5074, zoom = 10) %>%
addPolygons(
lng = c(-0.1278, -0.1025, -0.1446),
lat = c(51.5074, 51.5155, 51.4954),
color = "blue"
)
leaflet() %>%
addTiles() %>%
setView(lng = -2.3202680, 51.0936780, zoom = 10) %>%
addPolygons(
lng = c(-2.3202680, -2.321158, --2.321158, -2.319996, -2.3202680),
lat = c(51.0936780, 51.09239, 51.093854, 51.094244,51.0936780 ),
color = "blue"
)
# Create leaflet map centered in the UK and add polygon
leaflet() %>%
addTiles() %>%
setView(lng = -2.3202680, 51.0936780, zoom = 10) %>%
addPolygons(
lng = c(-2.3202680, -2.321158, -2.321158, -2.319996, -2.3202680),
lat = c(51.0936780, 51.09239, 51.093854, 51.094244,51.0936780 ),
color = "blue"
)
# Create leaflet map centered in the UK and add polygon
leaflet() %>%
addTiles(
urlTemplate = "https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png",
attribution = 'Map data © <a href="https://openstreetmap.org/copyright">OpenStreetMap</a> contributors'
) %>%
addProviderTiles("OpenStreetMap.Mapnik") %>%
setView(lng = -2.3202680, 51.0936780, zoom = 10) %>%
addPolygons(
lng = c(-2.3202680, -2.321158, -2.321158, -2.319996, -2.3202680),
lat = c(51.0936780, 51.09239, 51.093854, 51.094244,51.0936780 ),
color = "blue"
)
library(leaflet)
#Nick Hoare - Inoculated treatment
leaflet() %>%
addTiles(
urlTemplate = "https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png",
attribution = 'Map data © <a href="https://openstreetmap.org/copyright">OpenStreetMap</a> contributors'
) %>%
addProviderTiles("OpenStreetMap.Mapnik") %>%
setView(lng = -2.3202680, 51.0936780, zoom = 10) %>%
addPolygons(
lng = c(-2.3202680, -2.321158, -2.321158, -2.319996, -2.3202680),
lat = c(51.0936780, 51.09239, 51.093854, 51.094244,51.0936780 ),
color = "blue"
)
leaflet() %>%
addTiles(
urlTemplate = "https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png",
attribution = 'Map data © <a href="https://openstreetmap.org/copyright">OpenStreetMap</a> contributors'
) %>%
addProviderTiles("OpenStreetMap.Mapnik") %>%
setView(lng = -2.3202680, 51.0936780, zoom = 10) %>%
addPolygons(
lng = c(-2.3202680, -2.321158, -2.321158, -2.319996, -2.3202680),
lat = c(51.0936780, 51.09239, 51.093854, 51.094244,51.0936780 ),
color = "blue"
)
setwd('C:/dev/code/Petra')
library(tidyr)
library(dplyr)
library(purrr)
library(writexl)
library(readxl)
#read in first blast shhet
blast1 = read_excel('../../data/blast.xlsx', sheet = 'blast1', col_names = F)
filter1 =blast1[!grepl("^(Length|Score|Identities|Strand|Sbjct|Query:)", blast1$...1), ]
#remove rows where all cols are NA - these were various text lines, unless they are the OTU number rows
filter2 <- filter1[rowSums(is.na(filter1[, 2:13])) < ncol(filter1[, 2:13]) | grepl("^Query \\d+ of \\d+: OTU_", filter1[[1]]), ]
#adda column for the OTU number
filter2$OTU = NA
otu_values <- NA  # Temporary variable to store current OTU_x
for (i in 1:nrow(filter2)) {
match <- regmatches(filter2[i, 1], regexpr("^Query \\d+ of \\d+: (OTU_\\d+)", filter2[i, 1]))
if (length(match) > 0) {
otu_values <- match  # Update OTU_x value when a new query row is found
}
filter2$OTU[i] <- otu_values  # Assign the current OTU_x value to the row
}
#delete the rest of the text so it just says OTU_0003 or whatever
filter2$OTU <- sub("^.*?(OTU_\\d+)$", "\\1", filter2$OTU)
#now reove the rest of the rows with NAs, these are the OTU headers before the set of matches
filter3 <- filter2[rowSums(is.na(filter2[, 2:13])) < ncol(filter2[, 2:13]), ]
#remove the rows which start 'reference'
filter4 <- filter3[!grepl("^Reference", filter3[[1]]), ]
#only retain useful cols, SH, names and % match
filter5 = filter4[,c(1,2,5,8,14)]
#add some nice colnames
colnames(filter5) = c('Reference','SH','Genus','Percent','OTU')
#split name into genus and spp
filter5$species <- sapply(strsplit(filter5$Genus, " "), function(x) ifelse(length(x) > 1, x[2], NA))  # Assign the second word to Species if it exists
#remove rows where spp col is NA
filter6 <- filter5[!is.na(filter5$species), ]
#remove rows <97%
filter7 = filter6 %>% filter(Percent>=97)
View(filter7)
#save this for reference
write.csv(filter7, '../../results/blast197.csv')
#save this for reference
write.csv(filter7, '../../results/blast197.csv')
#these are the OTUs where there are multiple spp matches - but NOT at the same %
#so that the top % match can be chosen
df_filtered <- filter7 %>%
group_by(OTU) %>%
filter(n_distinct(Genus) > 1) %>%  # Keep only OTUs where Genus values do not match
filter(n_distinct(Percent) > 1) %>%  # Keep only OTUs where there is variation in Percent
ungroup()
View(df_filtered)
#now take the top percent match of the multiple matches
df_top_percent <- df_filtered %>%
group_by(OTU) %>%
slice(which.max(Percent)) %>%  # Select the row with the highest Percent value for each OTU
ungroup()
#then the OTUs which didnt have multiple matches - were all the same species for each OTU
df_same_spp <- filter7 %>%
group_by(OTU) %>%
filter(n_distinct(Genus) == 1) %>%  # Keep OTUs where all Genus values are the same
ungroup()
View(df_filtered)
View(filter7)
View(df_filtered)
View(df_filtered)
View(filter7)
View(df_top_percent)
View(df_top_percent)
View(df_same_spp)
View(df_same_spp)
View(df_same_spp)
View(filter7)
length(unique(filter7$OTU))
length(unique(df_top_percent$OTU))
df_same_spp <- filter7 %>%
group_by(OTU) %>%
filter(n_distinct(Genus) == 1) %>%  # Keep OTUs where all Genus values are the same
ungroup()
#and then take the first row
df_first_value <- df_same_spp %>%
group_by(OTU) %>%
slice_head(n = 1) %>%  # Select the first row for each OTU
ungroup()
length(unique(df_first_value$OTU))
blast1_OTUs = rbind.data.frame(df_first_value, df_top_percent)
View(blast1_OTUs)
#get the OTUs where taxon names was different - but percent match was the same
df_filtered_out <- filter7 %>%
group_by(OTU) %>%
filter(n_distinct(Genus) > 1) %>%  # Keep only OTUs where taxon name is different
filter(n_distinct(Percent) == 1) %>%  # Keep only OTUs where Percent has no variation
ungroup()
View(df_filtered_out)
length(unique(df_filtered_out$OTU))
View(df_same_spp)
View(df_first_value)
View(df_top_percent)
View(df_filtered)
colnames(filter5) = c('Reference','SH','Taxon','Percent','OTU')
#split name into genus and spp
filter5$species <- sapply(strsplit(filter5$Taxon, " "), function(x) ifelse(length(x) > 1, x[2], NA))  # Assign the second word to Species if it exists
#remove rows where spp col is NA
filter6 <- filter5[!is.na(filter5$species), ]
#remove rows <97%
filter7 = filter6 %>% filter(Percent>=97)
View(filter7)
View(filter5)
#only retain useful cols, SH, names and % match
filter5 = filter4[,c(1,2,5,8,14)]
View(filter5)
#add some nice colnames
colnames(filter5) = c('Reference','SH','Taxon','Percent','OTU')
View(filter5)
#split name into genus and spp
filter5$species <- sapply(strsplit(filter5$Taxon, " "), function(x) ifelse(length(x) > 1, x[2], NA))  # Assign the second word to Species if it exists
View(filter5)
#remove rows where spp col is NA
filter6 <- filter5[!is.na(filter5$species), ]
View(filter6)
#remove rows <97%
filter7 = filter6 %>% filter(Percent>=97)
#save this for reference
write.csv(filter7, '../../results/blast197.csv')
#these are the OTUs where there are multiple spp matches - but NOT at the same %
#so that the top % match can be chosen
#NB - here multiple spp level matches of Laccaria say, at the same % are lost.
#So if you had L.laccata and L.amethystina both at 99% - they are lost
#Here we are extracting multiple genus level, of different genus
df_filtered <- filter7 %>%
group_by(OTU) %>%
filter(n_distinct(Genus) > 1) %>%  # Keep only OTUs where Taxon name values DO NOT match
filter(n_distinct(Percent) > 1) %>%  # Keep only OTUs where there is variation in Percent
ungroup()
#these are the OTUs where there are multiple spp matches - but NOT at the same %
#so that the top % match can be chosen
#NB - here multiple spp level matches of Laccaria say, at the same % are lost.
#So if you had L.laccata and L.amethystina both at 99% - they are lost
#Here we are extracting multiple genus level, of different genus
df_filtered <- filter7 %>%
group_by(OTU) %>%
filter(n_distinct(Taxon) > 1) %>%  # Keep only OTUs where Taxon name values DO NOT match
filter(n_distinct(Percent) > 1) %>%  # Keep only OTUs where there is variation in Percent
ungroup()
View(df_filtered)
View(df_top_percent)
#now all take the top percent match of the multiple matches
df_top_percent <- df_filtered %>%
group_by(OTU) %>%
filter(Percent == max(Percent)) %>%  # Select all rows with the highest Percent per OTU
ungroup()
View(df_top_percent)
df_top_percent_clean <- df_top_percent %>%
group_by(OTU) %>%
filter(n_distinct(Taxon) == 1) %>%  # Keep only OTUs where all Taxon values match
ungroup()
df_multiple_taxa <- df_top_percent %>%
group_by(OTU) %>%
filter(n_distinct(Taxon) > 1) %>%  # Keep OTUs where Taxon varies
ungroup()
View(df_top_percent_clean)
View(df_multiple_taxa)
length(unique(df_top_percent_clean$OTU))
length(unique(df_multiple_taxa$OTU))
#then the OTUs which didnt have multiple matches - were all the same species for each OTU
df_same_spp <- filter7 %>%
group_by(OTU) %>%
filter(n_distinct(Taxon) == 1) %>%  # Keep OTUs where all Genus values are the same
ungroup()
#and then take the first row
df_first_value <- df_same_spp %>%
group_by(OTU) %>%
slice_head(n = 1) %>%  # Select the first row for each OTU
ungroup()
length(unique(df_first_value$OTU))
#get the OTUs where taxon names was different - but percent match was the same - leave these out
#but what were they
df_filtered_out <- filter7 %>%
group_by(OTU) %>%
filter(n_distinct(Genus) > 1) %>%  # Keep only OTUs where taxon name is different
filter(n_distinct(Percent) == 1) %>%  # Keep only OTUs where Percent has no variation
ungroup()
#get the OTUs where taxon names was different - but percent match was the same - leave these out
#but what were they
df_filtered_out <- filter7 %>%
group_by(OTU) %>%
filter(n_distinct(Taxon) > 1) %>%  # Keep only OTUs where taxon name is different
filter(n_distinct(Percent) == 1) %>%  # Keep only OTUs where Percent has no variation
ungroup()
length(union(df_filtered_out$OTU))
length(unique(df_filtered_out$OTU))
View(df_top_percent_clean)
View(df_multiple_taxa)
View(df_filtered_out)
length(unique(df_first_value$OTU))
length(unique(df_filtered$OTU))
length(unique(df_top_percent$OTU))
length(unique(df_top_percent_clean$OTU))
length(unique(df_multiple_taxa$OTU))
length(unique(df_filtered_out$OTU))
length(unique(filter7$OTU))
length(unique(df$OTU))
length(unique(df_filtered$OTU))
length(unique(df_top_percent$OTU))
length(unique(df_top_percent_clean$OTU))
#all lost OTU =
blast1_OTUs_lost = rbind.data.frame(df_filtered_out, df_multiple_taxa)
View(blast1_OTUs)
View(blast1_OTUs_lost)
#all lost OTU =
blast1_OTUs_lost = rbind.data.frame(df_filtered_out, df_multiple_taxa)
write.csv(df_filtered_out,'../../results/blast1_OTUs_lost.csv')
View(blast1_OTUs_lost)
