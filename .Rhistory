legend.position = "right", # Adjust legend position
axis.text.x = element_text(angle = 45, hjust = 1, size = 12),
axis.text.y = element_text(size = 12),
axis.title.y = element_text(size = 16) ,
axis.title.x = element_text(size = 16) # Adjust x-axis labels
)
mixed_model = mixed_model <- lmer(height ~ time * treatment + (1 | plot), data = data)
#2. exponential random slopes
#exponential model###################
mixed_model_exp = mixed_model <- lmer(log(height) ~ time * treatment +(1 | plot), data = data)
AIC(mixed_model)
AIC(mixed_model_exp)
#3.linear ransom slopes
model <- lmer(height ~ time * treatment + (time + treatment | plot), data = data)
#4.exponential random slopes
model <- lmer(log(height) ~ time * treatment + (time + treatment | plot), data = data)#does not converge
#5 GEE
gee_model <- geeglm(height ~ time * treatment,
id = plot,  # plot is the grouping factor (id variable)
family = gaussian,  # assuming normal distribution for height
corstr = "exchangeable",  # correlation structure (exchangeable here)
data = data)
#3.linear random slopes
model <- lmer(height ~ time * treatment + (time +| plot), data = data)#does not converge
#3.linear random slopes
model <- lmer(height ~ time * treatment + (time | plot), data = data)#does not converge
#3.linear random slopes
model <- lmer(height ~ time * treatment + (1 +time | plot), data = data)#does not converge
#3.linear random slopes
model <- lmer(height ~ time * treatment + (time | plot), data = data)#does not converge
#4.exponential random slopes
model <- lmer(log(height) ~ time * treatment + (time | plot), data = data)#does not converge
#3.linear random slopes
model <- lmer(height ~ time * treatment + (treatment | plot), data = data)#does not converge
#4.exponential random slopes
model <- lmer(log(height) ~ time * treatment + (treatment | plot), data = data)#does not converge
##check distribution of height
hist(data$height)
hist(data$log(height))
hist(log(data$(height))
hist(log(data$height))
cor(data$time, data$treatment)
model <- lmer(log(height) ~ time * treatment + (treatment | plot),
data = data,
control = lmerControl(optimizer = "nloptwrap",
optCtrl = list(maxfun = 10000)))
summary(mixed_model)
summary(mixed_model_exp)
#models
#1. linear random intercept
#linear model
mixed_model = mixed_model <- lmer(height ~ time * treatment + (1 | plot), data = data) #AIC~-778
summary(mixed_model)
summary(mixed_model_exp)
summary(mixed_model)
summary(mixed_model_exp)
summary(gee_model)
ceofs(mixed_model_exp)
coefs <- fixef(mixed_model_exp#)
coefs <- fixef(mixed_model_exp)
coefs
#read data.This is all data recorded, each group is a different size, but that
#doesnt matter for this analysis
data = read_excel('../../data/TilhillWorkingCopy.xlsx', sheet = 'GEEdata')
#delete NA rows
data = data %>% drop_na(height)
#look at quick summary
mean_heights <- data %>%
group_by(time, treatment,tree) %>%
summarize(mean_height = mean(height), .groups = "drop")
ggplot(data, aes(x = factor(time), y = height, fill = treatment)) +
geom_boxplot() +
labs(title = "Tilhill, height measurements across three time points",
x = "Months since planting",
y = "Height",
fill = "Treatment") +
scale_fill_manual(values = c("Control" = "orange", "Pellet" = "darkgreen")) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1) )+
theme(
legend.position = "right", # Adjust legend position
axis.text.x = element_text(angle = 45, hjust = 1, size = 12),
axis.text.y = element_text(size = 12),
axis.title.y = element_text(size = 16) ,
axis.title.x = element_text(size = 16) # Adjust x-axis labels
)
hist(data$height) #right skew
hist(log(data$height))
mydata$predicted_log_height <- predict(mixed_model_exp, newdata = mydata, re.form = NULL)
#2. exponential random intercetp
#exponential model###################
mixed_model_exp = mixed_model <- lmer(log(height) ~ time * treatment +(1 | plot), data = data) #AIC~-778
mydata$predicted_log_height <- predict(mixed_model_exp, newdata = mydata, re.form = NULL)
mydata$predicted_log_height <- predict(mixed_model_exp, newdata = mydata, re.form = NULL)
#predict for exp model
mydata$predicted_log_height <- predict(mixed_model_exp, newdata = mydata, re.form = NULL)
mydata = data
#predict for exp model
mydata$predicted_log_height <- predict(mixed_model_exp, newdata = mydata, re.form = NULL)
# Back-transform predictions to the original scale (exponentiate)
mydata$predicted_height_exp <- exp(mydata$predicted_log_height)
theme_minimal()
# Plot actual vs predicted heights
ggplot(mydata, aes(x = time, y = height, color = treatment)) +
geom_point() +  # Actual data points
geom_line(aes(y = predicted_height_exp), size = 1, linetype = "dashed") +  # Exponentiated predicted values
labs(title = "Actual vs Predicted Heights (Exponential Model)", x = "Time", y = "Height") +
scale_colour_manual(values = c("Control" = "orange", "Pellet" = "darkgreen")) +
theme(
legend.position = "right", # Adjust legend position
axis.text.x = element_text(angle = 45, hjust = 1, size = 12),
axis.text.y = element_text(size = 12),
axis.title.y = element_text(size = 16) ,
axis.title.x = element_text(size = 16) # Adjust x-axis labels
)
#get the confidence intervals and plot exp model
conf_int = confint(mixed_model_exp, level = 0.95)
# Convert to a data frame for easier plotting
conf_int_df <- as.data.frame(conf_int)
conf_int_df$term <- rownames(conf_int_df)  # Add the term names for plotting
fixed_effects <- fixef(mixed_model_exp)
conf_int_df$estimate <- fixed_effects[conf_int_df$term]
# Plot the fixed effects and their confidence intervals
data = conf_int_df[4:6,]
data$term = c('time','treatment','time:treatment')
ggplot(data, aes(x = term, ymin = `2.5 %`, ymax = `97.5 %`, y = estimate)) +
geom_pointrange(color = "blue", size = 1) +  # Point for the coefficient estimate and error bars for the CI
labs(title = "Fixed Effects with 95% Confidence Intervals",
x = "Fixed Effects", y = "Estimate") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))+
theme(
legend.position = "right", # Adjust legend position
axis.text.x = element_text(angle = 45, hjust = 1, size = 12),
axis.text.y = element_text(size = 12),
axis.title.y = element_text(size = 16) ,
axis.title.x = element_text(size = 16) # Adjust x-axis labels
)
control = data %>% filter(treatment == 'Control')
#read data.This is all data recorded, each group is a different size, but that
#doesnt matter for this analysis
data = read_excel('../../data/TilhillWorkingCopy.xlsx', sheet = 'GEEdata')
#delete NA rows
data = data %>% drop_na(height)
control = data %>% filter(treatment == 'Control')
treatment = data %>% filter(treatment == 'Pellet')
model.control = lm(log(data$height) ~ data$time)
model.treatment = lm(log(data$height)~ data$time)
summary(model.control)
summary(model.treatment)
View(control)
View(treatment)
model.control = lm(log(control$height) ~ data$time)
model.control = lm(log(control$height) ~ control$time)
model.treatment = lm(log(treatment$height)~ treatment$time)
summary(model.control)
summary(model.treatment)
plot(residuals(model.control), main = 'Residuals vs Fitted')
plot(residuals(model.treatment), main = 'Residuals vs Fitted')
#check models
model = model.control
qqnorm(residuals(model))
qqline(residuals(model), col = "red")
# Shapiro-Wilk test
shapiro.test(residuals(model))
model.control = lm(control$height) ~ control$time)
model.control = lm(control$height ~ control$time)
model.treatment = lm(treatment$height~ treatment$time)
plot(residuals(model.control), main = 'Residuals vs Fitted')
plot(residuals(model.treatment), main = 'Residuals vs Fitted')
qqnorm(residuals(model.control))
qqline(residuals(model.control), col = "red")
qqnorm(residuals(model.treatment))
qqline(residuals(model.treatment), col = "red")
# Shapiro-Wilk test
shapiro.test(residuals(model.control))
#plot predicted versus actual
control$predicted = predict(model.control)
abline(0, 1, col = "red")
plot(control$height, control$predicted,
main = "Predicted vs Actual",
xlab = "Actual Height",
ylab = "Predicted Height",
pch = 19, col = "blue")
abline(0, 1, col = "red")
#check distribution of points at each time point
shapiro.test(control$height[controla$time == 1])  # Time Point 1
#check distribution of points at each time point
shapiro.test(control$height[control$time == 1])  # Time Point 1
#check distribution of points at each time point
shapiro.test(control$height[control$time == 0])  # Time Point 1
#check distribution of points at each time point
shapiro.test(log(control$height[control$time == 0]))  # Time Point 1
#check distribution of points at each time point
shapiro.test(sqrt(control$height[control$time == 0]))  # Time Point 1
#check distribution of points at each time point
shapiro.test(1/(control$height[control$time == 0]))  # Time Point 1
library(MASS)
#try boxcox
bc <- boxcox(control$height~ control$time)
View(bc)
View(bc)
View(bc)
lambda <- bc$x[which.max(bc$y)]
control$transformed = ((control$height^lambda - 1)/lambda)
View(control)
#test again
shapiro.test((control$transformed[control$time == 0]))
###look ant control distributions across time
control.1 = control %>% filter(time==1)
library(dplyr)
library(ggplot2)
library(readxl)
library(tidyr)
library(geepack)
library(lme4)
library(lmerTest)
###look ant control distributions across time
control.1 = control %>% filter(time==1)
control.2 = control %>% filter(time == 2)
control.3 = control %>% filter(time == 3)
data = cbind.data.frame(control.1, control.2, control.3)
View(data)
View(data)
#read data.This is all data recorded, each group is a different size, but that
#doesnt matter for this analysis
data = read_excel('../../data/TilhillWorkingCopy.xlsx', sheet = 'GEEdata')
#delete NA rows
data = data %>% drop_na(height)
control = data %>% filter(treatment == 'Control')
treatment = data %>% filter(treatment == 'Pellet')
control.1 = control %>% filter(time==1)
control.2 = control %>% filter(time == 2)
control.3 = control %>% filter(time == 3)
control.data = cbind.data.frame(control.1, control.2, control.3)
View(control.1)
View(control.1)
###look ant control distributions across time
control.1 = control %>% filter(time==0) %>% select(height)
View(control.1)
View(data)
control.2 = control %>% filter(time == 10) %>% select(height)
control.data$time
unique(control$time)
control.2 = control %>% filter(time == 11) %>% select(height)
control.3 = control %>% filter(time == 17) %>% seect(height)
control.3 = control %>% filter(time == 17) %>% select(height)
control.data = cbind.data.frame(control.1, control.2, control.3)
control.1$time = 1
View(control.1)
control.2$time = 2
control.3$time = 3
control.data = rbind.data.frame(control.1, control.2, control.3)
View(control.data)
ggplot(control.data, aes(x = height, fill = as.factor(time))) +
geom_histogram(position = "identity", alpha = 0.5, binwidth = 1) +
labs(title = "Overlapping Histograms of Height Distributions",
x = "Height", y = "Count", fill = "Time Point") +
theme_minimal()
labs(title = "Overlapping Histograms of Height Distributions",
x = "Height", y = "Count", fill = "Time Point") +
theme_minimal()
ggplot(control.data, aes(x = height, fill = as.factor(time))) +
geom_histogram(position = "identity", alpha = 0.5, binwidth = 1) +
geom_density(alpha = 0.7)+
labs(title = "Overlapping Histograms of Height Distributions",
x = "Height", y = "Count", fill = "Time Point") +
theme_minimal()
ggplot(control.data, aes(x = height, fill = as.factor(time), color = as.factor(time))) +
geom_histogram(aes(y = ..density..), position = "identity", alpha = 0.5, binwidth = 1) +
geom_density(alpha = 0.7) +
labs(title = "Overlapping Histograms and Density Curves of Height Distributions",
x = "Height", y = "Density", fill = "Time Point", color = "Time Point") +
theme_minimal()
ggplot(control.data, aes(x = height, fill = as.factor(time), color = as.factor(time))) +
geom_density(alpha = 0.7) +
labs(title = "Overlapping Histograms and Density Curves of Height Distributions",
x = "Height", y = "Density", fill = "Time Point", color = "Time Point") +
theme_minimal()
#check distribution of points at each time point
# Time Point 1
shapiro.test(control$height[your_data$time == 0])  # Time Point 0
#check distribution of points at each time point
# Time Point 1
shapiro.test(control$height[control$time == 0])  # Time Point 0
#check distribution of points at each time point
# Time Point 1
shapiro.test(log(control$height[control$time == 0]) ) # Time Point 0
#check distribution of points at each time point
# Time Point 1
shapiro.test(sqrt(control$height[control$time == 0]) ) # Time Point 0
#read data.This is all data recorded, each group is a different size, but that
#doesnt matter for this analysis
data = read_excel('../../data/TilhillWorkingCopy.xlsx', sheet = 'GEEdata')
#delete NA rows
data = data %>% drop_na(height)
mean_heights <- data %>%
group_by(time, treatment,tree) %>%
summarize(mean_height = mean(height), .groups = "drop")
print(mean_heights)
#boxplots of all the poonts
ggplot(data, aes(x = factor(time), y = height, fill = treatment)) +
geom_boxplot() +
labs(title = "Tilhill, height measurements across three time points",
x = "Months since planting",
y = "Height",
fill = "Treatment") +
scale_fill_manual(values = c("Control" = "orange", "Pellet" = "darkgreen")) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1) )+
theme(
legend.position = "right", # Adjust legend position
axis.text.x = element_text(angle = 45, hjust = 1, size = 12),
axis.text.y = element_text(size = 12),
axis.title.y = element_text(size = 16) ,
axis.title.x = element_text(size = 16) # Adjust x-axis labels
)
hist(log(data$height)) # looks more Normal
#2. exponential random intercetp
#exponential model###################
mixed_model_exp = mixed_model <- lmer(log(height) ~ time * treatment +(1 | plot), data = data) #AIC~-778
mydata = data
#predict for exp model
mydata$predicted_log_height <- predict(mixed_model_exp, newdata = mydata, re.form = NULL)
# Back-transform predictions to the original scale (exponentiate)
mydata$predicted_height_exp <- exp(mydata$predicted_log_height)
# Plot actual vs predicted heights
ggplot(mydata, aes(x = time, y = height, color = treatment)) +
geom_point() +  # Actual data points
geom_line(aes(y = predicted_height_exp), size = 1, linetype = "dashed") +  # Exponentiated predicted values
labs(title = "Actual vs Predicted Heights (Exponential Model)", x = "Time", y = "Height") +
scale_colour_manual(values = c("Control" = "orange", "Pellet" = "darkgreen")) +
theme(
legend.position = "right", # Adjust legend position
axis.text.x = element_text(angle = 45, hjust = 1, size = 12),
axis.text.y = element_text(size = 12),
axis.title.y = element_text(size = 16) ,
axis.title.x = element_text(size = 16) # Adjust x-axis labels
)
#get the confidence intervals and plot exp model
conf_int = confint(mixed_model_exp, level = 0.95)
# Convert to a data frame for easier plotting
conf_int_df <- as.data.frame(conf_int)
conf_int_df$term <- rownames(conf_int_df)  # Add the term names for plotting
fixed_effects <- fixef(mixed_model_exp)
conf_int_df$estimate <- fixed_effects[conf_int_df$term]
# Plot the fixed effects and their confidence intervals
data = conf_int_df[4:6,]
data$term = c('time','treatment','time:treatment')
ggplot(data, aes(x = term, ymin = `2.5 %`, ymax = `97.5 %`, y = estimate)) +
geom_pointrange(color = "blue", size = 1) +  # Point for the coefficient estimate and error bars for the CI
labs(title = "Fixed Effects with 95% Confidence Intervals",
x = "Fixed Effects", y = "Estimate") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))+
theme(
legend.position = "right", # Adjust legend position
axis.text.x = element_text(angle = 45, hjust = 1, size = 12),
axis.text.y = element_text(size = 12),
axis.title.y = element_text(size = 16) ,
axis.title.x = element_text(size
setwd('C:/dev/code/Petra')
setwd('C:/dev/code/Petra')
library(dplyr)
library(ggplot2)
library(readxl)
library(tidyr)
library(geepack)
library(lme4)
library(lmerTest)
library(MASS)
#read in data. longform. need a column for the random effect/grouping var
#in this data treatment/plot/pellet etc are basically the same grouping var
#so it doesnt matter. Because there is only one emf and one treatment and one
#control plot at the site.
#read data.This is all data recorded, each group is a different size, but that
#doesnt matter for this analysis
data = read_excel('../../data/TilhillWorkingCopy.xlsx', sheet = 'GEEdata')
install.packages("randomForest")
library(randomForest)
rf_model <- randomForest(height ~ treatment + time + species + plot, data = data)
rf_model <- randomForest(height ~ treatment + time, data = data)
# View the model summary
print(rf_model)
# Check the importance of each predictor
importance(rf_model)
rf_model <- randomForest(height ~ treatment*time, data = data)
# View the model summary
print(rf_model)
# Check the importance of each predictor
importance(rf_model)
partialPlot(rf_model, pred.data = your_data, x.var = "treatment")
partialPlot(rf_model, pred.data = data, x.var = "treatment")
partialPlot(rf_model, pred.data = data, x.var = "treatment")
data$treatment <- factor(your_data$treatment)
data$treatment <- factor(data$treatment)
data$time <- factor(data$time)
rf_model <- randomForest(height ~ treatment*time, data = data)
partialPlot(rf_model, pred.data = data, x.var = "treatment")
print(rf_model)
# Check the importance of each predictor
importance(rf_model)
data = data %>% drop_na(height)
data$treatment <- factor(data$treatment)
data$time <- factor(data$time)
rf_model <- randomForest(height ~ treatment*time, data = data)
rf_model <- randomForest(height ~ treatment*time, data = data)
# View the model summary
print(rf_model)
# Check the importance of each predictor
importance(rf_model)
partialPlot(rf_model, pred.data = data, x.var = "treatment")
data = data %>% drop_na(height)
data$treatment <- factor(data$treatment)
data$time <- factor(data$time)
rf_model <- randomForest(height ~ treatment*time, data = data)
# View the model summary
print(rf_model)
# Check the importance of each predictor
importance(rf_model)
partialPlot(rf_model, pred.data = data, x.var = "treatment")
data = read_excel('../../data/TilhillWorkingCopy.xlsx', sheet = 'GEEdata')
data = data %>% drop_na(height)
rf_model <- randomForest(height ~ treatment*time, data = data)
partialPlot(rf_model, pred.data = data, x.var = "treatment")
data$time <- as.numeric(data$time)
rf_model <- randomForest(height ~ treatment*time, data = data)
partialPlot(rf_model, pred.data = data, x.var = "treatment")
data$treatment <- as.numeric(data$treatment)
View(data)
data = read_excel('../../data/TilhillWorkingCopy.xlsx', sheet = 'GEEdata')
data = data %>% drop_na(height)
View(data)
data <- data %>%
mutate(new_treatment = ifelse(treatment == "Pellet", 1, 0))
rf_model <- randomForest(height ~ new_treatment*time, data = data)
partialPlot(rf_model, pred.data = data, x.var = "treatment")
partialPlot(rf_model, pred.data = data, x.var = "new_treatment")
View(data)
# View the model summary
print(rf_model)
# Check the importance of each predictor
importance(rf_model)
unique(data$new_treatment)
sum(is.na(data$new_treatment))
?partialPlot
partialPlot(rf_model, pred.data = data, x.var = "new_treatment")
data$new_treatment = as.numeric(data$new_treatment)
rf_model <- randomForest(height ~ new_treatment*time, data = data)
partialPlot(rf_model, pred.data = data, x.var = "new_treatment")
data$new_treatment = as.factor(data$new_treatment)
rf_model <- randomForest(height ~ new_treatment*time, data = data)
partialPlot(rf_model, pred.data = data, x.var = "new_treatment")
data = is.data.frame(data)
data = read_excel('../../data/TilhillWorkingCopy.xlsx', sheet = 'GEEdata')
data = data %>% drop_na(height)
data <- data %>%
mutate(new_treatment = ifelse(treatment == "Pellet", 1, 0))
partialPlot(rf_model, pred.data = data, x.var = "new_treatment")
data <- data %>%
mutate(new_treatment = ifelse(treatment == "Pellet", 1, 0))
rf_model <- randomForest(height ~ new_treatment*time, data = data)
partialPlot(rf_model, pred.data = data, x.var = "new_treatment")
randomForest::partialPlot(rf_model, pred.data = data, x.var = "new_treatment")
randomForest::partialPlot(rf_model, as.data.frame(data), x.var = "new_treatment")
kmeans_result <- kmeans(data, centers = 6)
#kmeans??
data.kmeans =  data %>% select(c(height, time, treatment))
View(data.kmeans)
View(data.kmeans)
kmeans_result <- kmeans(data, centers = 6)
kmeans_result <- kmeans(data.kmeans, centers = 6)
View(data.kmeans)
#kmeans??
data.kmeans =  data %>% select(c(height, time, new_treatment))
kmeans_result <- kmeans(data.kmeans, centers = 6)
data.kmeans$cluster <- kmeans_result$cluster
# Check the distribution of treatment across clusters
table(data.kmeans$treatment, your_data$cluster)
# Check the distribution of treatment across clusters
table(data.kmeans$new_treatment, data.kmeans$cluster)
ggplot(data.kmeans, aes(x = factor(cluster), fill = factor(treatment))) +
geom_bar(position = "dodge") +
labs(title = "Treatment Distribution Across Clusters",
x = "Cluster",
fill = "Treatment")
ggplot(data.kmeans, aes(x = factor(cluster), fill = factor(new_treatment))) +
geom_bar(position = "dodge") +
labs(title = "Treatment Distribution Across Clusters",
x = "Cluster",
fill = "Treatment")
chisq_test <- chisq.test(table(data.kmeans$treatment, data.kmeans$cluster))
chisq_test <- chisq.test(table(data.kmeans$new_treatment, data.kmeans$cluster))
print(chisq_test)
View(data.kmeans)
# Create a data frame with PCA results
pca_data <- data.frame(pca$x, cluster = data.kmeans$cluster, treatment = data.kmeans$new_treatment)
pca <- prcomp(data.kmeans, center = TRUE, scale = TRUE)
# Create a data frame with PCA results
pca_data <- data.frame(pca$x, cluster = data.kmeans$cluster, treatment = data.kmeans$new_treatment)
# Plot PCA results
ggplot(pca_data, aes(x = PC1, y = PC2, color = factor(cluster), shape = factor(new_treatment))) +
geom_point() +
labs(title = "PCA of Data with Treatment and Clusters",
x = "Principal Component 1", y = "Principal Component 2")
View(pca_data)
# Plot PCA results
ggplot(pca_data, aes(x = PC1, y = PC2, color = factor(cluster), shape = factor(treatment))) +
geom_point() +
labs(title = "PCA of Data with Treatment and Clusters",
x = "Principal Component 1", y = "Principal Component 2")
View(chisq_test)
