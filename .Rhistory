geom_point(data = df_avg, aes(x = SiteCode, y = 'P(mg/l)'), color = "red", size = 3) +
# Labels and theme
labs(title = "Total Values by Site with Average P", x = "Site Code", y = "P (mg/l)") +
theme_minimal() +
theme(legend.position = "none", axis.text.x = element_text(angle = 45, hjust = 1))
View(df_P)
# Plotting
ggplot() +
# Boxplot for pH by site, ordered by median pH values
geom_boxplot(data = df_P, aes(x = SiteCode, y = Value, fill = SiteCode), alpha = 0.3) +
# Line graph for average pH from df_avg, ordered by average pH values
geom_line(data = df_avg, aes(x = SiteCode, y = P(mg/l), group = 1), color = "red", size = 1.2) +
# Add points for the average pH values
geom_point(data = df_avg, aes(x = SiteCode, y = P(mg/l)), color = "red", size = 3) +
# Labels and theme
labs(title = "Total Values by Site with Average P", x = "Site Code", y = "P (mg/l)") +
theme_minimal() +
theme(legend.position = "none", axis.text.x = element_text(angle = 45, hjust = 1))
View(df_P)
View(df_avg)
df_avg <- df_avg %>%
arrange('P(mg/l)')
df_avg <- df_avg %>%
arrange('P(mg/l)')
df_P$SiteCode <- factor(df_P$SiteCode, levels = df_P %>%
group_by(SiteCode) %>%
summarise(MedianValue = median(Value, na.rm = TRUE)) %>%
arrange(MedianValue) %>%
pull(SiteCode))
View(df_P)
colnames(df_Avg)
colnames(df_avg
)
# Plotting
ggplot() +
# Boxplot for pH by site, ordered by median pH values
geom_boxplot(data = df_P, aes(x = SiteCode, y = Value, fill = SiteCode), alpha = 0.3) +
# Line graph for average pH from df_avg, ordered by average pH values
geom_line(data = df_avg, aes(x = SiteCode, y = P(mg/l), group = 1), color = "red", size = 1.2) +
# Add points for the average pH values
geom_point(data = df_avg, aes(x = SiteCode, y = P(mg/l)), color = "red", size = 3) +
# Labels and theme
labs(title = "Total Values by Site with Average P", x = "Site Code", y = "P (mg/l)") +
theme_minimal() +
theme(legend.position = "none", axis.text.x = element_text(angle = 45, hjust = 1))
View(df_P)
soil = read_excel('../../data/soildata.xlsx')
#tidy data
#select required columns
soildata = soil[,c(1,2,3,10:21)]
#tidy some < in P column
soildata$`P_mg/l`= gsub("<", "", soildata$`P_mg/l`)
#remove the brackets
soildata$`P_mg/l` <- gsub(" \\(.*\\)", "", soildata$`P_mg/l`)
soildata$`K_mg/l` <- gsub(" \\(.*\\)", "", soildata$`K_mg/l`)
soildata$`Mg_mg/l` <- gsub(" \\(.*\\)", "", soildata$`Mg_mg/l`)
#P,Mg and K are char
soildata$`P_mg/l` <- as.numeric(unlist(soildata$`P_mg/l` ))
soildata$`K_mg/l` <- as.numeric(unlist(soildata$`K_mg/l`))
soildata$`Mg_mg/l` <- as.numeric(unlist(soildata$`Mg_mg/l`))
df_TotalC = df_long %>% filter(SoilProperty == 'TotalC')
df_avg <- df_avg %>%
arrange(TotalC)
df_TotalC = df_long %>% filter(SoilProperty == 'TotalC')
df_avg <- df_avg %>%
arrange(TotalC)
df_long <- soildata[, 3:ncol(soildata)] %>%
pivot_longer(cols = -SiteCode,  # Keep SiteCode column intact
names_to = "SoilProperty",
values_to = "Value")
df = soildata[,-c(1,2)]
df_avg <- df %>%
select(SiteCode, 2:13) %>%
group_by(SiteCode) %>%
summarise(across(everything(), \(x) mean(x, na.rm = TRUE)))
df_TotalC = df_long %>% filter(SoilProperty == 'TotalC')
df_avg <- df_avg %>%
arrange(TotalC)
df_TotalC = df_long %>% filter(SoilProperty == 'TotalC')
df_avg <- df_avg %>%
arrange(TotalC)
View(df_avg)
df_TotalC = df_long %>% filter(SoilProperty == 'TotalC%')
df_avg <- df_avg %>%
arrange(TotalC%)
setwd('C:/dev/code/Petra')
library(readxl)
library(dplyr)
library(tidyr)
library(ggplot2)
soil = read_excel('../../data/soildata.xlsx')
#tidy data
#select required columns
soildata = soil[,c(1,2,3,10:21)]
#tidy some < in P column
soildata$`P_mg/l`= gsub("<", "", soildata$`P_mg/l`)
#remove the brackets
soildata$`P_mg/l` <- gsub(" \\(.*\\)", "", soildata$`P_mg/l`)
soildata$`K_mg/l` <- gsub(" \\(.*\\)", "", soildata$`K_mg/l`)
soildata$`Mg_mg/l` <- gsub(" \\(.*\\)", "", soildata$`Mg_mg/l`)
#P,Mg and K are char
soildata$`P_mg/l` <- as.numeric(unlist(soildata$`P_mg/l` ))
soildata$`K_mg/l` <- as.numeric(unlist(soildata$`K_mg/l`))
soildata$`Mg_mg/l` <- as.numeric(unlist(soildata$`Mg_mg/l`))
df_long <- soildata[, 3:ncol(soildata)] %>%
pivot_longer(cols = -SiteCode,  # Keep SiteCode column intact
names_to = "SoilProperty",
values_to = "Value")
df = soildata[,-c(1,2)]
df_avg <- df %>%
select(SiteCode, 2:13) %>%
group_by(SiteCode) %>%
summarise(across(everything(), \(x) mean(x, na.rm = TRUE)))
View(df_long)
df_TotalC = df_long %>% filter(SoilProperty == 'TotalC%')
df_avg <- df_avg %>%
arrange(TotalC)
# Order SiteCode in df_pH by the median pH value for box plots
df_TotalC$SiteCode <- factor(df_TotalC$SiteCode, levels = df_TotalC %>%
group_by(SiteCode) %>%
summarise(MedianValue = median(Value, na.rm = TRUE)) %>%
arrange(MedianValue) %>%
pull(SiteCode))
# Plotting
ggplot() +
# Boxplot for pH by site, ordered by median pH values
geom_boxplot(data = df_TotalC, aes(x = SiteCode, y = Value, fill = SiteCode), alpha = 0.3) +
# Line graph for average pH from df_avg, ordered by average pH values
geom_line(data = df_avg, aes(x = SiteCode, y = TotalC, group = 1), color = "red", size = 1.2) +
# Add points for the average pH values
geom_point(data = df_avg, aes(x = SiteCode, y = TotalC), color = "red", size = 3) +
# Labels and theme
labs(title = "Total Values by Site with Average TotalC", x = "Site Code", y = "TotalC") +
theme_minimal() +
theme(legend.position = "none", axis.text.x = element_text(angle = 45, hjust = 1))
df_TotalC = df_long %>% filter(SoilProperty == 'TotalC')
df_avg <- df_avg %>%
arrange(TotalC)
# Order SiteCode in df_pH by the median pH value for box plots
df_TotalC$SiteCode <- factor(df_TotalC$SiteCode, levels = df_TotalC %>%
group_by(SiteCode) %>%
summarise(MedianValue = median(Value, na.rm = TRUE)) %>%
arrange(MedianValue) %>%
pull(SiteCode))
# Plotting
ggplot() +
# Boxplot for pH by site, ordered by median pH values
geom_boxplot(data = df_TotalC, aes(x = SiteCode, y = Value, fill = SiteCode), alpha = 0.3) +
# Line graph for average pH from df_avg, ordered by average pH values
geom_line(data = df_avg, aes(x = SiteCode, y = TotalC, group = 1), color = "red", size = 1.2) +
# Add points for the average pH values
geom_point(data = df_avg, aes(x = SiteCode, y = TotalC), color = "red", size = 3) +
# Labels and theme
labs(title = "Total Values by Site with Average TotalC", x = "Site Code", y = "TotalC") +
theme_minimal() +
theme(legend.position = "none", axis.text.x = element_text(angle = 45, hjust = 1))
df_TotalN = df_long %>% filter(SoilProperty == 'TotalN')
df_avg <- df_avg %>%
arrange(TotalN)
# Order SiteCode in df_pH by the median pH value for box plots
df_TotalN$SiteCode <- factor(df_TotalN$SiteCode, levels = df_TotalN %>%
group_by(SiteCode) %>%
summarise(MedianValue = median(Value, na.rm = TRUE)) %>%
arrange(MedianValue) %>%
pull(SiteCode))
# Plotting
ggplot() +
# Boxplot for pH by site, ordered by median pH values
geom_boxplot(data = df_TotalN, aes(x = SiteCode, y = Value, fill = SiteCode), alpha = 0.3) +
# Line graph for average pH from df_avg, ordered by average pH values
geom_line(data = df_avg, aes(x = SiteCode, y = TotalN, group = 1), color = "red", size = 1.2) +
# Add points for the average pH values
geom_point(data = df_avg, aes(x = SiteCode, y = TotalN), color = "red", size = 3) +
# Labels and theme
labs(title = "Total Values by Site with Average TotalN", x = "Site Code", y = "TotalN") +
theme_minimal() +
theme(legend.position = "none", axis.text.x = element_text(angle = 45, hjust = 1))
############ P
df_P = df_long %>% filter(SoilProperty == 'P_mg/l')
df_avg <- df_avg %>%
arrange(P_mg/l)
df_avg <- df_avg %>%
arrange(P_mg/l)
View(df_P)
View(df_avg)
df_P = df_long %>% filter(SoilProperty == 'P_mg/l')
View(df_P)
df_avg <- df_avg %>%
arrange('P_mg/l')
# Order SiteCode in df_pH by the median pH value for box plots
df_P$SiteCode <- factor(df_P$SiteCode, levels = df_P %>%
group_by(SiteCode) %>%
summarise(MedianValue = median(Value, na.rm = TRUE)) %>%
arrange(MedianValue) %>%
pull(SiteCode))
# Plotting
ggplot() +
# Boxplot for pH by site, ordered by median pH values
geom_boxplot(data = df_P, aes(x = SiteCode, y = Value, fill = SiteCode), alpha = 0.3) +
# Line graph for average pH from df_avg, ordered by average pH values
geom_line(data = df_avg, aes(x = SiteCode, y = P_mg/l, group = 1), color = "red", size = 1.2) +
# Add points for the average pH values
geom_point(data = df_avg, aes(x = SiteCode, y = P_mg/l), color = "red", size = 3) +
# Labels and theme
labs(title = "Total Values by Site with Average P", x = "Site Code", y = "P (mg/l)") +
theme_minimal() +
theme(legend.position = "none", axis.text.x = element_text(angle = 45, hjust = 1))
# Plotting
ggplot() +
# Boxplot for pH by site, ordered by median pH values
geom_boxplot(data = df_P, aes(x = SiteCode, y = Value, fill = SiteCode), alpha = 0.3) +
# Line graph for average pH from df_avg, ordered by average pH values
geom_line(data = df_avg, aes(x = SiteCode, y = 'P_mg/l', group = 1), color = "red", size = 1.2) +
# Add points for the average pH values
geom_point(data = df_avg, aes(x = SiteCode, y = 'P_mg/l'), color = "red", size = 3) +
# Labels and theme
labs(title = "Total Values by Site with Average P", x = "Site Code", y = "P (mg/l)") +
theme_minimal() +
theme(legend.position = "none", axis.text.x = element_text(angle = 45, hjust = 1))
soil = read_excel('../../data/soildata.xlsx')
#tidy data
#select required columns
soildata = soil[,c(1,2,3,10:21)]
soildata$P = gsub("<", "", soildata$P)
#remove the brackets
soildata$P <- gsub(" \\(.*\\)", "", soildata$P)
soildata$K <- gsub(" \\(.*\\)", "", soildata$K)
soildata$Mg <- gsub(" \\(.*\\)", "", soildata$Mg)
#P,Mg and K are char
soildata$P <- as.numeric(unlist(soildata$P))
soildata$K <- as.numeric(unlist(soildata$K))
soildata$Mg <- as.numeric(unlist(soildata$Mg))
df_long <- soildata[, 3:ncol(soildata)] %>%
pivot_longer(cols = -SiteCode,  # Keep SiteCode column intact
names_to = "SoilProperty",
values_to = "Value")
df = soildata[,-c(1,2)]
df_avg <- df %>%
select(SiteCode, 2:13) %>%
group_by(SiteCode) %>%
summarise(across(everything(), \(x) mean(x, na.rm = TRUE)))
df_P = df_long %>% filter(SoilProperty == P)
View(df_avg)
View(df_avg)
# Order SiteCode in df_pH by the median pH value for box plots
df_P$SiteCode <- factor(df_P$SiteCode, levels = df_P %>%
group_by(SiteCode) %>%
summarise(MedianValue = median(Value, na.rm = TRUE)) %>%
arrange(MedianValue) %>%
pull(SiteCode))
View(df_P)
df_P = df_long %>% filter(SoilProperty == P)
View(df_long)
df_P = df_long %>% filter(SoilProperty == 'P')
df_avg <- df_avg %>%
arrange(P)
# Order SiteCode in df_pH by the median pH value for box plots
df_P$SiteCode <- factor(df_P$SiteCode, levels = df_P %>%
group_by(SiteCode) %>%
summarise(MedianValue = median(Value, na.rm = TRUE)) %>%
arrange(MedianValue) %>%
pull(SiteCode))
# Plotting
ggplot() +
# Boxplot for pH by site, ordered by median pH values
geom_boxplot(data = df_P, aes(x = SiteCode, y = Value, fill = SiteCode), alpha = 0.3) +
# Line graph for average pH from df_avg, ordered by average pH values
geom_line(data = df_avg, aes(x = SiteCode, y = P, group = 1), color = "red", size = 1.2) +
# Add points for the average pH values
geom_point(data = df_avg, aes(x = SiteCode, y = P), color = "red", size = 3) +
# Labels and theme
labs(title = "Total Values by Site with Average P", x = "Site Code", y = "P (mg/l)") +
theme_minimal() +
theme(legend.position = "none", axis.text.x = element_text(angle = 45, hjust = 1))
View(df_long)
View(df_avg)
#remove dundreggan because thats where the NAs are and the ? in the corrplot
df_AG = df_avg %>% filter(SiteCode != 'AG')
View(df_AG)
corr_matrix <- cor(df_AG[,-1])
# Plot the correlation matrix
corrplot(corr_matrix, method = "circle", type = "upper",
tl.col = "black", tl.cex = 0.8, addCoef.col = "black")
View(df_avg)
View(df)
View(soildata)
View(soildata)
setwd('C:/dev/code/Petra')
library(readxl)
library(dplyr)
library(tidyr)
library(ggplot2)
soil = read_excel('../../data/soildata.xlsx')
#tidy data
#select required columns
soildata = soil[,c(1,2,3,10:21)]
#tidy some < in P column
soildata$P = gsub("<", "", soildata$P)
#remove the brackets
soildata$P <- gsub(" \\(.*\\)", "", soildata$P)
soildata$K <- gsub(" \\(.*\\)", "", soildata$K)
soildata$Mg <- gsub(" \\(.*\\)", "", soildata$Mg)
#P,Mg and K are char
soildata$P <- as.numeric(unlist(soildata$P))
soildata$K <- as.numeric(unlist(soildata$K))
soildata$Mg <- as.numeric(unlist(soildata$Mg))
df_long <- soildata_norm[, 3:ncol(soildata_norm)] %>%
pivot_longer(cols = -SiteCode,  # Keep SiteCode column intact
names_to = "Category",
values_to = "Value")
df_long <- soildata[, 3:ncol(soildata)] %>%
pivot_longer(cols = -SiteCode,  # Keep SiteCode column intact
names_to = "SoilProperty",
values_to = "Value")
df = soildata[,-c(1,2)]
df_avg <- df %>%
select(SiteCode, 2:13) %>%
group_by(SiteCode) %>%
summarise(across(everything(), \(x) mean(x, na.rm = TRUE)))
df_AG = df_avg %>% filter(SiteCode != 'AG')
corr_matrix <- cor(df_AG[,-1])
# Plot the correlation matrix
corrplot(corr_matrix, method = "circle", type = "upper",
tl.col = "black", tl.cex = 0.8, addCoef.col = "black")
#tidy data
#select required columns
soildata = soil[,c(1,2,3,10:20)]
View(soildata)
View(soildata)
soildata$P = gsub("<", "", soildata$P)
#remove the brackets
soildata$P <- gsub(" \\(.*\\)", "", soildata$P)
soildata$K <- gsub(" \\(.*\\)", "", soildata$K)
soildata$Mg <- gsub(" \\(.*\\)", "", soildata$Mg)
#P,Mg and K are char
soildata$P <- as.numeric(unlist(soildata$P))
soildata$K <- as.numeric(unlist(soildata$K))
soildata$Mg <- as.numeric(unlist(soildata$Mg))
df_long <- soildata[, 3:ncol(soildata)] %>%
pivot_longer(cols = -SiteCode,  # Keep SiteCode column intact
names_to = "SoilProperty",
values_to = "Value")
df = soildata[,-c(1,2)]
df_avg <- df %>%
select(SiteCode, 2:12) %>%
group_by(SiteCode) %>%
summarise(across(everything(), \(x) mean(x, na.rm = TRUE)))
View(df_avg)
df_AG = df_avg %>% filter(SiteCode != 'AG')
corr_matrix <- cor(df_AG[,-1])
# Plot the correlation matrix
corrplot(corr_matrix, method = "circle", type = "upper",
tl.col = "black", tl.cex = 0.8, addCoef.col = "black")
View(soildata)
###Highlands Rewilding Graphs
df.customer = soildata %>% filter(`SiteCode` == 'AA')
View(df.customer)
df.customer_long <- df.customer[, 4:14] %>%
pivot_longer(cols = everything(),
names_to = "Category",
values_to = "Value")
# Boxplot with facet_wrap
ggplot(df.customer_long, aes(x = "", y = Value)) +
geom_boxplot() +
facet_wrap(~Category, scales = "free_y") +  # Allows each facet to have its own y-scale
labs(x = NULL, y = "Value", title = "Soil Property Distributions") +
theme_bw()
View(df.customer)
Control = HighlandsC
HighlandsT = df.customer %>% filter(Sample %in% c('AA6','AA1','AA2'))
HighlandsC = df.customer %>% filter(Sample %in% c('AA3','AA4','AA5'))
Control = HighlandsC
Treatment =HighlandsT
soil_properties <- names(Treatment)[4:14]
t_test_results <- map_df(soil_properties, ~{
test <- t.test(Treatment[[.x]], Control[[.x]], var.equal = TRUE)  # Set var.equal=FALSE if variances are unequal
tibble(
Property = .x,
Mean_Treatment = round(mean(Treatment[[.x]], na.rm = TRUE), 2),
Mean_Control = round(mean(Control[[.x]], na.rm = TRUE), 2),
p_value = round(test$p.value, 2)
)
})
t_test_results %>%
mutate(p_value = signif(p_value, 3)) %>%  # Round p-values for readability
flextable() %>%
colformat_num(j = c("Mean_Treatment", "Mean_Control"), digits = 2) %>%
set_caption("T-Test Results for control and treatment soils") %>%
theme_vanilla()%>% autofit()
# Boxplot with facet_wrap
ggplot(df.customer_long, aes(x = "", y = Value)) +
geom_boxplot() +
facet_wrap(~Category, scales = "free_y") +  # Allows each facet to have its own y-scale
labs(x = NULL, y = "Value", title = "Soil Property Distributions") +
theme_bw()
HighlandsT = df.customer %>% filter(Sample %in% c('AA5','AA1','AA2'))
HighlandsC = df.customer %>% filter(Sample %in% c('AA3','AA4','AA6'))
Control = HighlandsC
Treatment =HighlandsT
soil_properties <- names(Treatment)[4:14]
t_test_results <- map_df(soil_properties, ~{
test <- t.test(Treatment[[.x]], Control[[.x]], var.equal = TRUE)  # Set var.equal=FALSE if variances are unequal
tibble(
Property = .x,
Mean_Treatment = round(mean(Treatment[[.x]], na.rm = TRUE), 2),
Mean_Control = round(mean(Control[[.x]], na.rm = TRUE), 2),
p_value = round(test$p.value, 2)
)
})
t_test_results %>%
mutate(p_value = signif(p_value, 3)) %>%  # Round p-values for readability
flextable() %>%
colformat_num(j = c("Mean_Treatment", "Mean_Control"), digits = 2) %>%
set_caption("T-Test Results for control and treatment soils") %>%
theme_vanilla()%>% autofit()
View(soildata)
df.customer = soildata %>% filter(`SiteCode` == 'AC')
df.customer_long <- df.customer[, 4:14] %>%
pivot_longer(cols = everything(),
names_to = "Category",
values_to = "Value")
# Boxplot with facet_wrap
ggplot(df.customer_long, aes(x = "", y = Value)) +
geom_boxplot() +
facet_wrap(~Category, scales = "free_y") +  # Allows each facet to have its own y-scale
labs(x = NULL, y = "Value", title = "Soil Property Distributions") +
theme_bw()
Treat = df.customer %>% filter(Sample %in% c('AC1','AC2','AC3'))
Cont = df.customer %>% filter(Sample %in% c('AC4','AC5','AC6'))
Control = Cont
Treatment =Treat
soil_properties <- names(Treatment)[4:14]
t_test_results <- map_df(soil_properties, ~{
test <- t.test(Treatment[[.x]], Control[[.x]], var.equal = TRUE)  # Set var.equal=FALSE if variances are unequal
tibble(
Property = .x,
Mean_Treatment = round(mean(Treatment[[.x]], na.rm = TRUE), 2),
Mean_Control = round(mean(Control[[.x]], na.rm = TRUE), 2),
p_value = round(test$p.value, 2)
)
})
t_test_results %>%
mutate(p_value = signif(p_value, 3)) %>%  # Round p-values for readability
flextable() %>%
colformat_num(j = c("Mean_Treatment", "Mean_Control"), digits = 2) %>%
set_caption("T-Test Results for control and treatment soils") %>%
theme_vanilla()%>% autofit()
df.customer = soildata %>% filter(`SiteCode` == 'AD')
df.customer_long <- df.customer[, 4:14] %>%
pivot_longer(cols = everything(),
names_to = "Category",
values_to = "Value")
ggplot(df.customer_long, aes(x = "", y = Value)) +
geom_boxplot() +
facet_wrap(~Category, scales = "free_y") +  # Allows each facet to have its own y-scale
labs(x = NULL, y = "Value", title = "Soil Property Distributions") +
theme_bw()
View(soildata)
Treat = df.customer %>% filter(Sample %in% c('AD4','AD5','AD6'))
Cont = df.customer %>% filter(Sample %in% c('AD1','AD2','AD3'))
Control = Cont
Treatment =Treat
soil_properties <- names(Treatment)[4:14]
# Perform t-tests for each soil property
t_test_results <- map_df(soil_properties, ~{
test <- t.test(Treatment[[.x]], Control[[.x]], var.equal = TRUE)  # Set var.equal=FALSE if variances are unequal
tibble(
Property = .x,
Mean_Treatment = round(mean(Treatment[[.x]], na.rm = TRUE), 2),
Mean_Control = round(mean(Control[[.x]], na.rm = TRUE), 2),
p_value = round(test$p.value, 2)
)
})
t_test_results %>%
mutate(p_value = signif(p_value, 3)) %>%  # Round p-values for readability
flextable() %>%
colformat_num(j = c("Mean_Treatment", "Mean_Control"), digits = 2) %>%
set_caption("T-Test Results for control and treatment soils") %>%
theme_vanilla()%>% autofit()
df.customer = soildata %>% filter(`SiteCode` == 'AE')
df.customer_long <- df.customer[, 4:14] %>%
pivot_longer(cols = everything(),
names_to = "Category",
values_to = "Value")
# Boxplot with facet_wrap
ggplot(df.customer_long, aes(x = "", y = Value)) +
geom_boxplot() +
facet_wrap(~Category, scales = "free_y") +  # Allows each facet to have its own y-scale
labs(x = NULL, y = "Value", title = "Soil Property Distributions") +
theme_bw()
View(soildata)
Treat = df.customer %>% filter(Sample %in% c('AE4','AE5','AE6'))
Cont = df.customer %>% filter(Sample %in% c('AE1','AE2','AE3'))
Control = Cont
Treatment =Treat
soil_properties <- names(Treatment)[4:14]
# Perform t-tests for each soil property
t_test_results <- map_df(soil_properties, ~{
test <- t.test(Treatment[[.x]], Control[[.x]], var.equal = TRUE)  # Set var.equal=FALSE if variances are unequal
tibble(
Property = .x,
Mean_Treatment = round(mean(Treatment[[.x]], na.rm = TRUE), 2),
Mean_Control = round(mean(Control[[.x]], na.rm = TRUE), 2),
p_value = round(test$p.value, 2)
)
})
t_test_results %>%
mutate(p_value = signif(p_value, 3)) %>%  # Round p-values for readability
flextable() %>%
colformat_num(j = c("Mean_Treatment", "Mean_Control"), digits = 2) %>%
set_caption("T-Test Results for control and treatment soils") %>%
theme_vanilla()%>% autofit()
