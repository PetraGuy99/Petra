install.packages("leaflet")
# Load library
library(leaflet)
polygon_coords <- list(
list(c(51.5074, -0.1278)),  # London
list(c(51.5155, -0.1025)),  # Islington
list(c(51.4954, -0.1446))   # Westminster
)
leaflet() %>%
addTiles() %>%
setView(lng = -0.1278, lat = 51.5074, zoom = 10) %>%
addPolygons(
lng = c(-0.1278, -0.1025, -0.1446),
lat = c(51.5074, 51.5155, 51.4954),
color = "blue"
)
polygon_coords <- matrix(c(
-2.3202680, 51.0936780, # SE
-2.321158,51.09239,  # SW
-2.320709,51.093854, # SW
-2.319996 , 51.094244 # Close the polygon
), ncol = 2, byrow = TRUE)
# Create leaflet map centered in the UK and add polygon
leaflet() %>%
addTiles() %>%
setView(lng = -0.1278, lat = 51.5074, zoom = 10) %>%
addPolygons(
lng = c(-0.1278, -0.1025, -0.1446),
lat = c(51.5074, 51.5155, 51.4954),
color = "blue"
)
polygon_coords <- matrix(c(
-2.3202680, 51.0936780, # SE
-2.321158,51.09239,  # SW
-2.320709,51.093854, # SW
-2.319996 , 51.094244 # Close the polygon
), ncol = 2, byrow = TRUE)
polygon <- st_polygon(list(polygon_coords))
install.packages("ggplot2")
install.packages("sf")
install.packages("rnaturalearth")
install.packages("rnaturalearthdata")
# Load libraries
library(ggplot2)
library(sf)
library(rnaturalearth)
library(rnaturalearthdata)
# Get world map data, including the UK
world <- ne_countries(scale = "medium", returnclass = "sf")
polygon <- st_polygon(list(polygon_coords))
polygon_coords <- matrix(c(
-2.3202680, 51.0936780, # SE
-2.321158,51.09239,  # SW
-2.320709,51.093854, # SW
-2.319996 , 51.094244,
-2.3202680, 51.0936780
# Close the polygon
), ncol = 2, byrow = TRUE)
polygon <- st_polygon(list(polygon_coords))
sf_polygon <- st_sfc(polygon, crs = 4326)
# Plot using ggplot2
ggplot(data = world) +
geom_sf() +
geom_sf(data = sf_polygon, fill = "lightblue", color = "blue") +
coord_sf(xlim = c(-6, 2), ylim = c(50, 60)) + # UK bounding box
theme_minimal() +
labs(title = "Polygon around London")
# Polygon coordinates (longitude, latitude) around London
polygon_coords <- matrix(c(
-2.3202680, 51.0936780, # SE
-2.321158,51.09239,  # SW
-2.320709,51.093854, # SW
-2.319996 , 51.094244,
-2.3202680, 51.0936780
# Close the polygon
), ncol = 2, byrow = TRUE)
# Convert to sf polygon object
polygon <- st_polygon(list(polygon_coords))
sf_polygon <- st_sfc(polygon, crs = 4326)
ggplot(data = world) +
geom_sf() +
geom_sf(data = sf_polygon, fill = "lightblue", color = "blue") +
coord_sf(xlim = c(-6, 2), ylim = c(50, 60)) + # UK bounding box
theme_minimal() +
labs(title = "Polygon around London")
polygon_coords <- list(
list(c(-2.3202680, 51.0936780)),  # London
list(c(-2.321158,51.09239)),  # Islington
list(c( -2.320709,51.093854)),
list(c(-2.319996 , 51.094244)),
list(c( -2.3202680, 51.0936780))
)
# Create leaflet map centered in the UK and add polygon
leaflet() %>%
addTiles() %>%
setView(lng = -0.1278, lat = 51.5074, zoom = 10) %>%
addPolygons(
lng = c(-0.1278, -0.1025, -0.1446),
lat = c(51.5074, 51.5155, 51.4954),
color = "blue"
)
leaflet() %>%
addTiles() %>%
setView(lng = -2.3202680, 51.0936780, zoom = 10) %>%
addPolygons(
lng = c(-2.3202680, -2.321158, --2.321158, -2.319996, -2.3202680),
lat = c(51.0936780, 51.09239, 51.093854, 51.094244,51.0936780 ),
color = "blue"
)
# Create leaflet map centered in the UK and add polygon
leaflet() %>%
addTiles() %>%
setView(lng = -2.3202680, 51.0936780, zoom = 10) %>%
addPolygons(
lng = c(-2.3202680, -2.321158, -2.321158, -2.319996, -2.3202680),
lat = c(51.0936780, 51.09239, 51.093854, 51.094244,51.0936780 ),
color = "blue"
)
# Create leaflet map centered in the UK and add polygon
leaflet() %>%
addTiles(
urlTemplate = "https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png",
attribution = 'Map data © <a href="https://openstreetmap.org/copyright">OpenStreetMap</a> contributors'
) %>%
addProviderTiles("OpenStreetMap.Mapnik") %>%
setView(lng = -2.3202680, 51.0936780, zoom = 10) %>%
addPolygons(
lng = c(-2.3202680, -2.321158, -2.321158, -2.319996, -2.3202680),
lat = c(51.0936780, 51.09239, 51.093854, 51.094244,51.0936780 ),
color = "blue"
)
library(leaflet)
#Nick Hoare - Inoculated treatment
leaflet() %>%
addTiles(
urlTemplate = "https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png",
attribution = 'Map data © <a href="https://openstreetmap.org/copyright">OpenStreetMap</a> contributors'
) %>%
addProviderTiles("OpenStreetMap.Mapnik") %>%
setView(lng = -2.3202680, 51.0936780, zoom = 10) %>%
addPolygons(
lng = c(-2.3202680, -2.321158, -2.321158, -2.319996, -2.3202680),
lat = c(51.0936780, 51.09239, 51.093854, 51.094244,51.0936780 ),
color = "blue"
)
leaflet() %>%
addTiles(
urlTemplate = "https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png",
attribution = 'Map data © <a href="https://openstreetmap.org/copyright">OpenStreetMap</a> contributors'
) %>%
addProviderTiles("OpenStreetMap.Mapnik") %>%
setView(lng = -2.3202680, 51.0936780, zoom = 10) %>%
addPolygons(
lng = c(-2.3202680, -2.321158, -2.321158, -2.319996, -2.3202680),
lat = c(51.0936780, 51.09239, 51.093854, 51.094244,51.0936780 ),
color = "blue"
)
# Load the species and functional traits data
species <- read.csv('../../data/Fordie_OTUs.csv')
# Load the species and functional traits data
species <- read.csv('../../data/Fordie_OTUS.csv')
# Load the species and functional traits data
species <- read.csv('../../data/Fordie_OTUS.csv')
setwd('C:/dev/code/Petra')
# Load the species and functional traits data
species <- read.csv('../../data/Fordie_OTUS.csv')
View(species)
spicies[1,1]
species[1,1]
species[] <- lapply(species, function(x) gsub('"', '', x))
species[1,1]
setwd('C:/dev/code/Petra')
install.packages("BiocManager")
# Install Biostrings package from Bioconductor
BiocManager::install("Biostrings")
fasta_file <- "../../data/MicrobiomeMasterData.fasta"
fasta_sequences <- readDNAStringSet(fasta_file)
setwd('C:/dev/code/Petra')
install.packages("BiocManager")
# Install Biostrings package from Bioconductor
BiocManager::install("Biostrings")
fasta_sequences <- readDNAStringSet(fasta_file)
# Load Biostrings package
library(Biostrings)
fasta_sequences <- readDNAStringSet(fasta_file)
#sequences are list item 1, and outs are 1 to...
length(fasta_sequences) #= 4829
# Read the raw FASTA file
raw_lines <- readLines(fasta_file)
# Filter out lines that do not start with '>'
sequences_only <- raw_lines[!grepl("^>", raw_lines)]
#construct OTU label
otu_lables = paste('OTU', 1:4829, sep = '_')
#make sequences df
sequences_df = cbind(otu_lables, sequences_only)
View(sequences_df)
View(sequences_df)
writeXStringSet(modified_fasta, "../../results/output.fasta")
writeXStringSet(sequences_df, "../../results/output.fasta")
#make sequences df
sequences_df <- data.frame(
ID = otu_lables,
Sequence = sequences_only,
stringsAsFactors = FALSE
)
#sequences are list item 1, and outs are 1 to...
length(fasta_sequences) #= 4829
#construct OTU label
otu_lables = paste('OTU', 1:6502, sep = '_')
#make sequences df
sequences_df <- data.frame(
ID = otu_lables,
Sequence = sequences_only,
stringsAsFactors = FALSE
)
dna_sequences <- DNAStringSet(sequences_df$Sequence)
names(dna_sequences) <- sequences_df$ID
writeXStringSet(dna_sequences, "../../results/fordie_modified.fasta")
